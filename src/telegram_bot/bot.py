import pytz
import asyncio
import logging
from dataclasses import dataclass
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from discord_bot import DiscordBot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
_log = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class BotStates(StatesGroup):
    waiting_message_text = State()
    waiting_day_number = State()
    waiting_delayed_message_text = State()
    waiting_delayed_message_datetime = State()
    editing_delayed_message_text = State()
    editing_delayed_message_datetime = State()


@dataclass
class DelayedMessage:
    id: int
    text: str
    date_time: datetime
    created_at: datetime


class TelegramBotController:
    """
    Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Discord –±–æ—Ç–æ–º
    """
    
    def __init__(self, discord_bot: DiscordBot, bot_token: str, owner_id: int):
        self.discord_bot = discord_bot
        self.bot = Bot(token=bot_token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.owner_id = owner_id
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.delayed_messages: dict[int, DelayedMessage] = {}
        self.next_message_id = 1
        
        # –ó–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.delayed_tasks: dict[int, asyncio.Task] = {}
        
        self._setup_handlers()
    
    def check_owner(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º"""
        if user_id != self.owner_id:
            _log.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            return False
        return True
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.dp.message(Command("start"))(self.start_command)
        self.dp.message(Command("menu"))(self.show_main_menu)
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.dp.callback_query(F.data == "main_menu")(self.main_menu_callback)
        self.dp.callback_query(F.data == "auto_mark_menu")(self.auto_mark_menu_callback)
        self.dp.callback_query(F.data == "message_settings_menu")(self.message_settings_menu_callback)
        self.dp.callback_query(F.data == "wait_day_menu")(self.wait_day_menu_callback)
        self.dp.callback_query(F.data == "delayed_messages_menu")(self.delayed_messages_menu_callback)
        
        # –ê–≤—Ç–æ–æ—Ç–º–µ—Ç–∫–∞
        self.dp.callback_query(F.data == "toggle_auto_mark")(self.toggle_auto_mark_callback)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.dp.callback_query(F.data == "set_message_text")(self.set_message_text_callback)
        
        # –î–µ–Ω—å –æ–∂–∏–¥–∞–Ω–∏—è
        self.dp.callback_query(F.data == "set_wait_day")(self.set_wait_day_callback)
        self.dp.callback_query(F.data == "clear_wait_day")(self.clear_wait_day_callback)
        
        # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.dp.callback_query(F.data == "create_delayed_message")(self.create_delayed_message_callback)
        self.dp.callback_query(F.data == "view_delayed_messages")(self.view_delayed_messages_callback)
        self.dp.callback_query(F.data.startswith("edit_delayed_"))(self.edit_delayed_message_callback)
        self.dp.callback_query(F.data.startswith("delete_delayed_"))(self.delete_delayed_message_callback)
        self.dp.callback_query(F.data.startswith("edit_text_"))(self.edit_delayed_text_callback)
        self.dp.callback_query(F.data.startswith("edit_datetime_"))(self.edit_delayed_datetime_callback)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.dp.message(BotStates.waiting_message_text)(self.process_message_text)
        self.dp.message(BotStates.waiting_day_number)(self.process_day_number)
        self.dp.message(BotStates.waiting_delayed_message_text)(self.process_delayed_message_text)
        self.dp.message(BotStates.waiting_delayed_message_datetime)(self.process_delayed_message_datetime)
        self.dp.message(BotStates.editing_delayed_message_text)(self.process_edit_delayed_text)
        self.dp.message(BotStates.editing_delayed_message_datetime)(self.process_edit_delayed_datetime)
    
    def get_main_menu_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üîî –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–≤—Ç–æ–æ—Ç–º–µ—Ç–∫–∞", callback_data="auto_mark_menu"))
        builder.row(InlineKeyboardButton(text="üí¨ –¢–µ–∫—Å—Ç –∞–≤—Ç–æ–æ—Ç–º–µ—Ç–∫–∏", callback_data="message_settings_menu"))
        builder.row(InlineKeyboardButton(text="üìÖ –û—Ç–ª–æ–∂–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–º–µ—Ç–∫—É –¥–æ –¥–Ω—è", callback_data="wait_day_menu"))
        builder.row(InlineKeyboardButton(text="‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="delayed_messages_menu"))
        return builder.as_markup()
    
    def get_back_keyboard(self, back_to: str = "main_menu") -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'"""
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=back_to))
        return builder.as_markup()
    
    async def start_command(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if not self.check_owner(message.from_user.id):
            return
            
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Discord –±–æ—Ç–æ–º.\n"
            f"ü§ñ –í–∞—à ID: {message.from_user.id}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=self.get_main_menu_keyboard()
        )
    
    async def show_main_menu(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        if not self.check_owner(message.from_user.id):
            return
            
        await message.answer(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Discord –±–æ—Ç–æ–º:",
            reply_markup=self.get_main_menu_keyboard()
        )
    
    async def main_menu_callback(self, callback: types.CallbackQuery):
        """Callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        if not self.check_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        await callback.message.edit_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Discord –±–æ—Ç–æ–º:",
            reply_markup=self.get_main_menu_keyboard()
        )
        await callback.answer()
    
    # === –ê–í–¢–û–û–¢–ú–ï–¢–ö–ê ===
    
    async def auto_mark_menu_callback(self, callback: types.CallbackQuery):
        """–ú–µ–Ω—é –∞–≤—Ç–æ–æ—Ç–º–µ—Ç–∫–∏"""
        if not self.check_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if self.discord_bot.should_send_mark_message else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"
        
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å", callback_data="toggle_auto_mark"))
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        
        await callback.message.edit_text(
            f"üîî **–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–≤—Ç–æ–æ—Ç–º–µ—Ç–∫–∞**\n\n"
            f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ (–ø–Ω-–ø—Ç) —Å 10:30 –¥–æ 12:00 –ú–°–ö\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}",
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    async def toggle_auto_mark_callback(self, callback: types.CallbackQuery):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–º–µ—Ç–∫–∏"""
        if not self.check_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        if self.discord_bot.should_send_mark_message:
            self.discord_bot.disable_sending_in_chat()
            status = "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"
            action = "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
        else:
            self.discord_bot.enable_sending_in_chat()
            status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞"
            action = "–≤–∫–ª—é—á–µ–Ω–∞"
        
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="toggle_auto_mark"))
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="auto_mark_menu"))
        
        await callback.message.edit_text(
            f"üîî **–ê–≤—Ç–æ–æ—Ç–º–µ—Ç–∫–∞ {action}!**\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}",
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        await callback.answer(f"–ê–≤—Ç–æ–æ—Ç–º–µ—Ç–∫–∞ {action}!")
        _log.info(f"–ê–≤—Ç–æ–æ—Ç–º–µ—Ç–∫–∞ {action} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    
    # === –ù–ê–°–¢–†–û–ô–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø ===
    
    async def message_settings_menu_callback(self, callback: types.CallbackQuery):
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.check_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        current_message = self.discord_bot.chat_channel_message
        
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="set_message_text"))
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        
        await callback.message.edit_text(
            f"üí¨ **–¢–µ–∫—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–≤—Ç–æ–æ—Ç–º–µ—Ç–∫–∏**\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: `{current_message}`",
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    async def set_message_text_callback(self, callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.check_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        await callback.message.edit_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏:",
            reply_markup=self.get_back_keyboard("message_settings_menu")
        )
        await state.set_state(BotStates.waiting_message_text)
        await callback.answer()
    
    async def process_message_text(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.check_owner(message.from_user.id):
            return
            
        new_text = message.text.strip()
        self.discord_bot.set_chat_message = new_text
        
        await state.clear()
        await message.answer(
            f"‚úÖ **–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
            f"–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: `{new_text}`",
            reply_markup=self.get_back_keyboard("message_settings_menu"),
            parse_mode="Markdown"
        )
        _log.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_text}")
    
    # === –î–ï–ù–¨ –û–ñ–ò–î–ê–ù–ò–Ø ===
    
    async def wait_day_menu_callback(self, callback: types.CallbackQuery):
        """–ú–µ–Ω—é –¥–Ω—è –æ–∂–∏–¥–∞–Ω–∏—è"""
        if not self.check_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        current_day = self.discord_bot.wait_until_target_day
        day_text = str(current_day) if current_day is not None else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å", callback_data="set_wait_day"))
        if current_day:
            builder.row(InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_wait_day"))
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        
        await callback.message.edit_text(
            f"üìÖ **–û—Ç–ª–æ–∂–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–º–µ—Ç–∫—É –¥–æ –¥–Ω—è**\n\n"
            f"–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∞–≤—Ç–æ–æ—Ç–º–µ—Ç–∫—É –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞\n\n"
            f"–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å –æ–∂–∏–¥–∞–Ω–∏—è: {day_text}",
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    async def set_wait_day_callback(self, callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–Ω—è –æ–∂–∏–¥–∞–Ω–∏—è"""
        if not self.check_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        await callback.message.edit_text(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–Ω—è –º–µ—Å—è—Ü–∞ (1-31):",
            reply_markup=self.get_back_keyboard("wait_day_menu")
        )
        await state.set_state(BotStates.waiting_day_number)
        await callback.answer()
    
    async def process_day_number(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –¥–Ω—è"""
        if not self.check_owner(message.from_user.id):
            return
            
        try:
            day = int(message.text.strip())
            if not 1 <= day <= 31:
                await message.answer(
                    "‚ùå –ù–æ–º–µ—Ä –¥–Ω—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 31. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return
            
            self.discord_bot.set_day = day
            await state.clear()
            
            await message.answer(
                f"‚úÖ **–ê–≤—Ç–æ–æ—Ç–º–µ—Ç–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞!**\n\n"
                f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–≤—Ç–æ–æ—Ç–º–µ—Ç–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {day} —á–∏—Å–ª–∞.",
                reply_markup=self.get_back_keyboard("wait_day_menu"),
                parse_mode="Markdown"
            )
            _log.info(f"–î–µ–Ω—å –æ–∂–∏–¥–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {day}")
            
        except ValueError:
            await message.answer(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –¥–Ω—è (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31):"
            )
    
    async def clear_wait_day_callback(self, callback: types.CallbackQuery):
        """–û—á–∏—Å—Ç–∫–∞ –¥–Ω—è –æ–∂–∏–¥–∞–Ω–∏—è"""
        if not self.check_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        self.discord_bot.set_day = None
        
        await callback.message.edit_text(
            f"‚úÖ **–ê–≤—Ç–æ–æ—Ç–º–µ—Ç–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
            f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–≤—Ç–æ–æ—Ç–º–µ—Ç–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.",
            reply_markup=self.get_back_keyboard("wait_day_menu"),
            parse_mode="Markdown"
        )
        await callback.answer("–ê–≤—Ç–æ–æ—Ç–º–µ—Ç–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        _log.info("–î–µ–Ω—å –æ–∂–∏–¥–∞–Ω–∏—è –æ—á–∏—â–µ–Ω")
    
    # === –û–¢–õ–û–ñ–ï–ù–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ===
    
    async def delayed_messages_menu_callback(self, callback: types.CallbackQuery):
        """–ú–µ–Ω—é –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.check_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        count = len(self.delayed_messages)
        
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="create_delayed_message"))
        if count > 0:
            builder.row(InlineKeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ", callback_data="view_delayed_messages"))
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        
        await callback.message.edit_text(
            f"‚è∞ **–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è**\n\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {count}",
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    async def create_delayed_message_callback(self, callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.check_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        await callback.message.edit_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:",
            reply_markup=self.get_back_keyboard("delayed_messages_menu")
        )
        await state.set_state(BotStates.waiting_delayed_message_text)
        await callback.answer()
    
    async def process_delayed_message_text(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.check_owner(message.from_user.id):
            return
            
        text = message.text.strip()
        await state.update_data(delayed_message_text=text)
        
        await message.answer(
            f"üìù –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: `{text}`\n\n"
            f"‚è∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏.\n\n"
            f"**–§–æ—Ä–º–∞—Ç—ã:**\n"
            f"‚Ä¢ `–ß–ß:–ú–ú` –∏–ª–∏ `–ß–ß:–ú–ú:–°–°` - —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è (—Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞)\n"
            f"‚Ä¢ `–î–î.–ú–ú –ß–ß:–ú–ú` –∏–ª–∏ `–î–î.–ú–ú –ß–ß:–ú–ú:–°–°` - –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞\n"
            f"‚Ä¢ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú` –∏–ª–∏ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°` - –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\n\n"
            f"**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            f"‚Ä¢ `15:30` –∏–ª–∏ `15:30:45`\n"
            f"‚Ä¢ `25.12 18:00` –∏–ª–∏ `25.12 18:00:30`\n"
            f"‚Ä¢ `01.01.2025 00:00` –∏–ª–∏ `01.01.2025 00:00:15`",
            reply_markup=self.get_back_keyboard("delayed_messages_menu"),
            parse_mode="Markdown"
        )
        await state.set_state(BotStates.waiting_delayed_message_datetime)
    
    async def process_delayed_message_datetime(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.check_owner(message.from_user.id):
            return
            
        datetime_str = message.text.strip()
        
        try:
            target_datetime = self.parse_datetime_string(datetime_str)
            data = await state.get_data()
            text = data["delayed_message_text"]
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_id = self.next_message_id
            self.next_message_id += 1
            
            delayed_msg = DelayedMessage(
                id=message_id,
                text=text,
                date_time=target_datetime,
                created_at=datetime.now(self.moscow_tz)
            )
            
            self.delayed_messages[message_id] = delayed_msg
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            task = asyncio.create_task(self.schedule_delayed_message(delayed_msg))
            self.delayed_tasks[message_id] = task
            
            await state.clear()
            
            await message.answer(
                f"‚úÖ **–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!**\n\n"
                f"üìù –¢–µ–∫—Å—Ç: `{text}`\n"
                f"‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {target_datetime.strftime('%d.%m.%Y %H:%M:%S')} –ú–°–ö",
                reply_markup=self.get_back_keyboard("delayed_messages_menu"),
                parse_mode="Markdown"
            )
            _log.info(f"–°–æ–∑–¥–∞–Ω–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{message_id} –Ω–∞ {target_datetime}")
            
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    
    def parse_datetime_string(self, datetime_str: str) -> datetime:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        moscow_now = datetime.now(self.moscow_tz)
        
        # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è (–ß–ß:–ú–ú –∏–ª–∏ –ß–ß:–ú–ú:–°–°)
        if ":" in datetime_str and "." not in datetime_str:
            try:
                # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å —Å–µ–∫—É–Ω–¥–∞–º–∏
                if datetime_str.count(":") == 2:
                    time_obj = datetime.strptime(datetime_str, "%H:%M:%S").time()
                else:
                    time_obj = datetime.strptime(datetime_str, "%H:%M").time()
                
                target_dt = moscow_now.replace(
                    hour=time_obj.hour,
                    minute=time_obj.minute,
                    second=time_obj.second,
                    microsecond=0
                )
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –±–µ—Ä–µ–º –∑–∞–≤—Ç—Ä–∞
                if target_dt <= moscow_now:
                    target_dt += timedelta(days=1)
                return target_dt
            except ValueError:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú –∏–ª–∏ –ß–ß:–ú–ú:–°–°")
        
        # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –±–µ–∑ –≥–æ–¥–∞ (–î–î.–ú–ú –ß–ß:–ú–ú –∏–ª–∏ –î–î.–ú–ú –ß–ß:–ú–ú:–°–°)
        elif datetime_str.count(".") == 1:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–æ–µ—Ç–æ—á–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
                if datetime_str.count(":") == 2:
                    dt = datetime.strptime(f"{datetime_str}.{moscow_now.year}", "%d.%m %H:%M:%S.%Y")
                else:
                    dt = datetime.strptime(f"{datetime_str}.{moscow_now.year}", "%d.%m %H:%M.%Y")
                
                target_dt = moscow_now.replace(
                    year=dt.year,
                    month=dt.month,
                    day=dt.day,
                    hour=dt.hour,
                    minute=dt.minute,
                    second=dt.second,
                    microsecond=0
                )
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
                if target_dt <= moscow_now:
                    target_dt = target_dt.replace(year=moscow_now.year + 1)
                return target_dt
            except ValueError:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú –ß–ß:–ú–ú –∏–ª–∏ –î–î.–ú–ú –ß–ß:–ú–ú:–°–°")
        
        # –ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°)
        elif datetime_str.count(".") == 2:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–æ–µ—Ç–æ—á–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
                if datetime_str.count(":") == 2:
                    dt = datetime.strptime(datetime_str, "%d.%m.%Y %H:%M:%S")
                else:
                    dt = datetime.strptime(datetime_str, "%d.%m.%Y %H:%M")
                    
                return moscow_now.replace(
                    year=dt.year,
                    month=dt.month,
                    day=dt.day,
                    hour=dt.hour,
                    minute=dt.minute,
                    second=dt.second,
                    microsecond=0
                )
            except ValueError:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª–Ω–æ–π –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°")
        
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏")
    
    async def schedule_delayed_message(self, delayed_msg: DelayedMessage):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            moscow_now = datetime.now(self.moscow_tz)
            wait_seconds = (delayed_msg.date_time - moscow_now).total_seconds()
            
            if wait_seconds > 0:
                _log.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è #{delayed_msg.id} –≤ —Ç–µ—á–µ–Ω–∏–µ {wait_seconds} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(wait_seconds)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            success = await self.discord_bot.send_message_to_channel(
                channel_id=self.discord_bot._private_channel_id,
                message_content=delayed_msg.text
            )
            
            if success:
                _log.info(f"–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{delayed_msg.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
                try:
                    await self.bot.send_message(
                        self.owner_id,
                        f"‚úÖ **–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n\n"
                        f"üìù –¢–µ–∫—Å—Ç: `{delayed_msg.text}`\n"
                        f"‚è∞ –í—Ä–µ–º—è: {delayed_msg.date_time.strftime('%d.%m.%Y %H:%M:%S')} –ú–°–ö",
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    _log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ: {e}")
            else:
                _log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{delayed_msg.id}")
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ
                try:
                    await self.bot.send_message(
                        self.owner_id,
                        f"‚ùå **–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!**\n\n"
                        f"üìù –¢–µ–∫—Å—Ç: `{delayed_msg.text}`\n"
                        f"‚è∞ –í—Ä–µ–º—è: {delayed_msg.date_time.strftime('%d.%m.%Y %H:%M:%S')} –ú–°–ö",
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    _log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            if delayed_msg.id in self.delayed_messages:
                del self.delayed_messages[delayed_msg.id]
            if delayed_msg.id in self.delayed_tasks:
                del self.delayed_tasks[delayed_msg.id]
                
        except asyncio.CancelledError:
            _log.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è #{delayed_msg.id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
        except Exception as e:
            _log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è #{delayed_msg.id}: {e}")
    
    async def view_delayed_messages_callback(self, callback: types.CallbackQuery):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.check_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        if not self.delayed_messages:
            await callback.message.edit_text(
                "üìã –û—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.",
                reply_markup=self.get_back_keyboard("delayed_messages_menu")
            )
            await callback.answer()
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        sorted_messages = sorted(self.delayed_messages.values(), key=lambda x: x.date_time)
        
        text = "üìã **–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n\n"
        
        builder = InlineKeyboardBuilder()
        for msg in sorted_messages:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            preview_text = msg.text[:30] + "..." if len(msg.text) > 30 else msg.text
            text += f"**#{msg.id}** ‚Ä¢ {msg.date_time.strftime('%d.%m %H:%M')}\n`{preview_text}`\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            builder.row(
                InlineKeyboardButton(text=f"‚úèÔ∏è #{msg.id}", callback_data=f"edit_delayed_{msg.id}"),
                InlineKeyboardButton(text=f"üóë #{msg.id}", callback_data=f"delete_delayed_{msg.id}")
            )
        
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="delayed_messages_menu"))
        
        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    async def edit_delayed_message_callback(self, callback: types.CallbackQuery):
        """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.check_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        message_id = int(callback.data.split("_")[-1])
        
        if message_id not in self.delayed_messages:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        msg = self.delayed_messages[message_id]
        
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_text_{message_id}"))
        builder.row(InlineKeyboardButton(text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f"edit_datetime_{message_id}"))
        builder.row(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_delayed_{message_id}"))
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="view_delayed_messages"))
        
        await callback.message.edit_text(
            f"üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è #{message_id}**\n\n"
            f"**–¢–µ–∫—Å—Ç:** `{msg.text}`\n"
            f"**–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:** {msg.date_time.strftime('%d.%m.%Y %H:%M:%S')} –ú–°–ö\n"
            f"**–°–æ–∑–¥–∞–Ω–æ:** {msg.created_at.strftime('%d.%m.%Y %H:%M:%S')} –ú–°–ö",
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        await callback.answer()
    
    async def edit_delayed_text_callback(self, callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.check_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        message_id = int(callback.data.split("_")[-1])
        
        if message_id not in self.delayed_messages:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        await state.update_data(editing_message_id=message_id)
        msg = self.delayed_messages[message_id]
        
        await callback.message.edit_text(
            f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è #{message_id}**\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: `{msg.text}`\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
            reply_markup=self.get_back_keyboard("view_delayed_messages"),
            parse_mode="Markdown"
        )
        await state.set_state(BotStates.editing_delayed_message_text)
        await callback.answer()
    
    async def process_edit_delayed_text(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.check_owner(message.from_user.id):
            return
            
        data = await state.get_data()
        message_id = data["editing_message_id"]
        new_text = message.text.strip()
        
        if message_id not in self.delayed_messages:
            await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await state.clear()
            return
        
        self.delayed_messages[message_id].text = new_text
        await state.clear()
        
        await message.answer(
            f"‚úÖ **–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è #{message_id} –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
            f"–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: `{new_text}`",
            reply_markup=self.get_back_keyboard("view_delayed_messages"),
            parse_mode="Markdown"
        )
        _log.info(f"–¢–µ–∫—Å—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è #{message_id} –∏–∑–º–µ–Ω–µ–Ω")
    
    async def edit_delayed_datetime_callback(self, callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.check_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        message_id = int(callback.data.split("_")[-1])
        
        if message_id not in self.delayed_messages:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        await state.update_data(editing_message_id=message_id)
        msg = self.delayed_messages[message_id]
        
        await callback.message.edit_text(
            f"‚è∞ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è #{message_id}**\n\n"
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {msg.date_time.strftime('%d.%m.%Y %H:%M:%S')} –ú–°–ö\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n\n"
            f"**–§–æ—Ä–º–∞—Ç—ã:**\n"
            f"‚Ä¢ `–ß–ß:–ú–ú` –∏–ª–∏ `–ß–ß:–ú–ú:–°–°` - —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è\n"
            f"‚Ä¢ `–î–î.–ú–ú –ß–ß:–ú–ú` –∏–ª–∏ `–î–î.–ú–ú –ß–ß:–ú–ú:–°–°` - –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\n"
            f"‚Ä¢ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú` –∏–ª–∏ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°` - –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è",
            reply_markup=self.get_back_keyboard("view_delayed_messages"),
            parse_mode="Markdown"
        )
        await state.set_state(BotStates.editing_delayed_message_datetime)
        await callback.answer()
    
    async def process_edit_delayed_datetime(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.check_owner(message.from_user.id):
            return
            
        data = await state.get_data()
        message_id = data["editing_message_id"]
        datetime_str = message.text.strip()
        
        if message_id not in self.delayed_messages:
            await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await state.clear()
            return
        
        try:
            new_datetime = self.parse_datetime_string(datetime_str)
            
            # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É
            if message_id in self.delayed_tasks:
                self.delayed_tasks[message_id].cancel()
                del self.delayed_tasks[message_id]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
            self.delayed_messages[message_id].date_time = new_datetime
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            delayed_msg = self.delayed_messages[message_id]
            task = asyncio.create_task(self.schedule_delayed_message(delayed_msg))
            self.delayed_tasks[message_id] = task
            
            await state.clear()
            
            await message.answer(
                f"‚úÖ **–í—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è #{message_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
                f"–ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {new_datetime.strftime('%d.%m.%Y %H:%M:%S')} –ú–°–ö",
                reply_markup=self.get_back_keyboard("view_delayed_messages"),
                parse_mode="Markdown"
            )
            _log.info(f"–í—Ä–µ–º—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è #{message_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_datetime}")
            
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    
    async def delete_delayed_message_callback(self, callback: types.CallbackQuery):
        """–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.check_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        message_id = int(callback.data.split("_")[-1])
        
        if message_id not in self.delayed_messages:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
        if message_id in self.delayed_tasks:
            self.delayed_tasks[message_id].cancel()
            del self.delayed_tasks[message_id]
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = self.delayed_messages[message_id]
        del self.delayed_messages[message_id]
        
        await callback.message.edit_text(
            f"‚úÖ **–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{message_id} —É–¥–∞–ª–µ–Ω–æ!**\n\n"
            f"–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: `{msg.text}`",
            reply_markup=self.get_back_keyboard("view_delayed_messages"),
            parse_mode="Markdown"
        )
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
        _log.info(f"–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{message_id} —É–¥–∞–ª–µ–Ω–æ")
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        _log.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        await self.dp.start_polling(self.bot)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        for task in self.delayed_tasks.values():
            task.cancel()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        try:
            await self.dp.stop_polling()
        except Exception as e:
            _log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {e}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        try:
            await self.bot.session.close()
        except Exception as e:
            _log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
            
        _log.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def run_telegram_bot(bot_token: str, owner_id: int | str, discord_bot: DiscordBot):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ –≤–º–µ—Å—Ç–µ —Å Discord –±–æ—Ç–æ–º
    
    Args:
        bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        owner_id: –í–∞—à Telegram id
        discord_bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Discord –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    """
    telegram_bot = None
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
        telegram_bot = TelegramBotController(
            discord_bot=discord_bot,
            bot_token=bot_token,
            owner_id=int(owner_id)
        )
        
        _log.info("Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        await telegram_bot.start_polling()
        
    except asyncio.CancelledError:
        _log.info("Telegram –±–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        raise  # –ü–µ—Ä–µ–¥–∞–µ–º CancelledError –¥–∞–ª—å—à–µ
    except Exception as e:
        _log.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ Telegram –±–æ—Ç–µ: {e}")
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        if telegram_bot:
            try:
                await telegram_bot.stop()
            except Exception as e:
                _log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Telegram –±–æ—Ç–∞: {e}")